{"/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/test.js":"/* istanbul instrument in package npmtest_cheerio_httpcli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/lib.npmtest_cheerio_httpcli.js":"/* istanbul instrument in package npmtest_cheerio_httpcli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cheerio_httpcli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cheerio_httpcli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cheerio-httpcli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cheerio_httpcli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cheerio_httpcli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cheerio_httpcli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cheerio_httpcli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cheerio_httpcli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cheerio_httpcli.__dirname + '/lib.npmtest_cheerio_httpcli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/index.js":"module.exports = require('./lib/core');\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/core.js":"/*jshint -W100*/\n\n'use strict';\n\nvar assign        = require('object-assign');\nvar cheerioExtend = require('./cheerio-extend');\nvar encoding      = require('./encoding');\nvar client        = require('./client');\nvar pkg           = require('../package.json');\nvar browsers      = require('./browsers.json');\n\n/**\n * cheerio-httpcliモジュール本体\n */\nvar cheerioHttpCli = {\n  /**\n   * プロパティ\n   */\n  version: pkg.version, // バージョン情報\n\n  /**\n   * メソッド\n   */\n\n  /**\n   * プロパティや内部情報の初期化\n   */\n  reset: function () {\n    // リクエストヘッダ\n    this.headers = {};\n    // タイムアウトまでの時間(効いているかどうか不明)\n    this.timeout = 30000;\n    // gzip転送する/しない\n    this.gzip = true;\n    // Refererを自動設定する/しない\n    this.referer = true;\n    // <meta[http-equiv=refresh]>を検知してリダイレクトする/しない\n    this.followMetaRefresh = false;\n    // 受信を許可する最大のサイズ\n    this.maxDataSize = null;\n    // XML自動判別を使用しない\n    this.forceHtml = false;\n    // デバッグオプション\n    this.debug = false;\n\n    client.reset();\n  },\n\n  /**\n   * プロパティを操作\n   *\n   * @param name  操作するプロパティ名\n   * @param value 挿入する値\n   * @param nomerge trueのときマージを行わない\n   */\n  set: function (name, value, nomerge) {\n    // プロパティが存在するかチェック\n    if (! Object.keys(this).some(function (prop) {\n      return (prop === name && typeof val !== 'function');\n    })) {\n      throw new Error('no such property \"' + name + '\"');\n    }\n\n    // オブジェクトへの代入ならマージする\n    if (nomerge !== true && typeof this[name] === 'object' && typeof value === 'object') {\n      this[name] = assign(this[name], value);\n    } else {\n      this[name] = value;\n    }\n  },\n\n  /**\n   * 使用するiconvモジュールを指定\n   *\n   * @param icmod iconvモジュール名(iconv|iconv-jp|iconv-lite)\n   */\n  setIconvEngine: function (icmod) {\n    if (! encoding.iconvLoad(icmod)) {\n      throw new Error('Cannot find module \"' + icmod + '\"');\n    }\n  },\n\n  /**\n   * ブラウザごとのUser-Agentをワンタッチ設定\n   *\n   * @param browser ブラウザ種類(see browsers.json)\n   * @return 設定できた/できなかった\n   */\n  setBrowser: function (type) {\n    if (type in browsers) {\n      this.headers['User-Agent'] = browsers[type];\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * GETによる非同期httpリクエストを実行\n   *\n   * @param url      リクエスト先のURL\n   * @param param    リクエストパラメータ\n   * @param encode   取得先のHTMLのエンコーディング(default: 自動判定)\n   * @param callback リクエスト完了時のコールバック関数(err, cheerio, response, body)\n   */\n  fetch: function (url, param, encode, callback) {\n    return client.run('GET', url, param, encode, callback);\n  },\n\n  /**\n   * GETによる同期httpリクエストを実行\n   *\n   * @param url      リクエスト先のURL\n   * @param param    リクエストパラメータ\n   * @param encode   取得先のHTMLのエンコーディング(default: 自動判定)\n   * @param callback リクエスト完了時のコールバック関数(err, cheerio, response, body)\n   */\n  fetchSync: function (url, param, encode) {\n    return client.run('GET', url, param, encode, 'sync');\n  }\n};\n\n// clientオブジェクト内で使用する外部オブジェクトを登録\ncheerioHttpCli.reset();\nclient.core = cheerioHttpCli;\nclient.encoding = encoding;\nclient.cheerio = cheerioExtend(encoding, client);\n\nmodule.exports = cheerioHttpCli;\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/cheerio-extend.js":"/*jshint -W100*/\n\n'use strict';\n\nvar cheerio = require('cheerio');\nvar each    = require('foreach');\n\n/**\n * cheerioオブジェクト拡張モジュール(プロトタイプにメソッド追加)\n */\nmodule.exports = function (encoding, client) {\n  each([\n    'html',\n    'click',\n    'submit',\n    'tick-untick',\n    'field',\n    'url',\n    'download'\n  ], function (m) {\n    require('./cheerio/' + m)(encoding, client, cheerio);\n  });\n\n  return cheerio;\n};\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/encoding.js":"/*jshint -W100*/\n\n'use strict';\n\nvar jschardet = require('jschardet');\n\n/**\n * <head>タグ内からエンコーディングを判定する正規表現\n */\n/*eslint-disable key-spacing*/\nvar reEnc = {\n  head    : /<head[\\s>]([\\s\\S]*?)<\\/head>/i,\n  charset : /<meta[^>]*[\\s;]+charset\\s*=\\s*[\"']?([\\w\\-_]+)[\"']?/i\n};\n\n/**\n * iconvモジュール情報\n */\nvar iconvMod = {\n  engine : null,\n  func   : null,\n  cache  : {}\n};\n/*eslint-enable key-spacing*/\n\n/**\n * encodingモジュール本体\n */\nvar encoding = {\n  /**\n   * メソッド\n   */\n\n  /**\n   * iconvモジュールをロード\n   *\n   * @param module iconvモジュール名(iconv|iconv-jp|iconv-lite)\n   * @return ロードできた/できなかった\n   */\n  iconvLoad: function (module) {\n    // モジュール名チェック\n    if (! /^iconv(-(jp|lite))?$/.test(module)) {\n      return false;\n    }\n\n    // モジュールをロード\n    try {\n      iconvMod.engine = require(module);\n    } catch (/*eslint-disable no-unused-vars*/ e /*eslint-enable no-unused-vars*/) {\n      return false;\n    }\n\n    if (iconvMod.engine.Iconv) {\n      // iconv/iconv-jpはIconvというメソッドを持っている\n      iconvMod.func = function (enc, buffer, revert) {\n        enc = enc.toUpperCase();\n        var from = enc;\n        var to = 'UTF-8';\n        if (revert) {\n          from = 'UTF-8';\n          to = enc;\n        }\n        var cacheKey = from + ':' + to;\n        if (! (cacheKey in iconvMod.cache)) {\n          // Iconvオブジェクトをキャッシュする\n          iconvMod.cache[cacheKey] = new iconvMod.engine.Iconv(from, to + '//TRANSLIT//IGNORE');\n        }\n        return iconvMod.cache[cacheKey].convert(buffer);\n      };\n    } else {\n      // iconv-lite用\n      iconvMod.func = function (enc, buffer, revert) {\n        if (! iconvMod.engine.encodingExists(enc)) {\n          // iconv/iconv-jpとエラーオブジェクトの形を合わせる\n          var err = new Error('EINVAL, Conversion not supported.');\n          err.errno = 22;\n          err.code = 'EINVAL';\n          throw err;\n        }\n        return iconvMod.engine[(revert) ? 'encode' : 'decode'](buffer, enc);\n      };\n    }\n    return true;\n  },\n\n  /**\n   * エンコーディング名指定がUTF-8かどうか\n   *\n   * @param enc エンコーディング指定名('utf-8', 'shift_jis', ...)\n   * @return true or false\n   */\n  isUTF8: function (enc) {\n    return /^utf\\-?8$/i.test(enc);\n  },\n\n  /**\n   * HTML(Buffer)のエンコーディングをUTF-8に変換\n   *\n   * @param enc    変換元のエンコーディング\n   * @param buffer HTML(Buffer)\n   * @return UTF-8に変換後のHTML(Buffer)\n   */\n  convert: function (enc, buffer) {\n    if (this.isUTF8(enc)) {\n      return buffer;\n    }\n    if (/(shift_jis|sjis)/i.test(enc)) {\n      // Shift_JISを指定してIconvで変換すると半角チルダが波ダッシュ(0x301C)に変換されてしまうのでCP932に変更\n      enc = 'CP932';\n    }\n    return iconvMod.func(enc, buffer);\n  },\n\n  /**\n   * パラメータのURL%エンコード(各種エンコーディング対応)\n   *\n   * @param enc 変換先のエンコーディング\n   * @param str URLエンコードする文字列\n   * @return encで指定したエンコーディングでURL%エンコードした文字列\n   */\n  escape: function (enc, str) {\n    // var re = /^[\\w\\.\\(\\)\\-!~*']+$/;  // encodeURIComponent互換\n    var re = /^[\\w~.-]+$/;           // RFC-3986準拠\n    str = String(str);\n    if (re.test(str)) {\n      // エンコード不要\n      return str;\n    }\n\n    // UTF-8から指定したエンコーディングに変換したバッファを回してエスケープ文字列作成\n    var buffer = new Buffer(str);\n    if (! this.isUTF8(enc)) {\n      buffer = iconvMod.func(enc, buffer, true);\n    }\n    return Array.prototype.slice.call(buffer).map(function (b) {\n      if (b < 128) {\n        var c = String.fromCharCode(b);\n        if (re.test(c)) {\n          return c;\n        }\n      }\n      return '%' + ('0' + b.toString(16).toUpperCase()).substr(-2);\n    }).join('');\n  },\n\n  /**\n   * jschardetモジュールによるHTMLのエンコーディング判定\n   *\n   * @param buffer HTML(Buffer)\n   * @return 判定できた場合はエンコーディング名\n   */\n  detectByBuffer: function (buffer) {\n    var enc = jschardet.detect(buffer);\n    // 高精度で判定できた場合のみ\n    if (enc && enc.encoding && (enc.confidence || 0) >= 0.99) {\n      return enc.encoding;\n    }\n    return null;\n  },\n\n  /**\n   * <head>タグ内から正規表現でエンコーディング判定\n   *\n   * @param buffer HTML(Buffer)\n   * @return 判定できた場合はエンコーディング名\n   */\n  detectByHeader: function (buffer) {\n    var head = buffer.toString('ascii').match(reEnc.head);\n    if (head) {\n      var charset = head[1].match(reEnc.charset);\n      if (charset) {\n        return charset[1].trim();\n      }\n    }\n    return null;\n  },\n\n  /**\n   * HTMLエンコーディング判定(自動判定 -> <head>タグ判定の順)\n   *\n   * @param buffer HTML(Buffer)\n   * @return 判定できた場合はエンコーディング名\n   */\n  detect: function (buffer) {\n    return this.detectByBuffer(buffer) || this.detectByHeader(buffer);\n  }\n};\n\n// 初期状態では iconv > iconv-lite の優先順でロードしておく\n/*eslint-disable no-unused-expressions*/\nencoding.iconvLoad('iconv') || encoding.iconvLoad('iconv-lite');\n/*eslint-enable no-unused-expressions*/\n\nmodule.exports = encoding;\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/client.js":"/*jshint -W100*/\n\n'use strict';\n\nvar request    = require('request');\nvar urlParser  = require('url');\nvar RSVP       = require('rsvp');\nvar each       = require('foreach');\nvar typeOf     = require('type-of');\nvar assign     = require('object-assign');\nvar prettyjson = require('prettyjson');\nvar constants  = require('constants');\nvar spawnSync  = require('spawn-sync');\nvar path       = require('path');\nvar cutil      = require('./cheerio/util');\n// os-localeは最初に実行した段階で結果をcacheに持つので\n// fetch()前に別のモジュールがos-localeを実行していた場合に\n// オプション内容によっては予期しない結果が返ることがある\nvar requireUncached = require('require-uncached');\nvar osLocale        = requireUncached('os-locale');\n\n/**\n * <meta[http-equiv=refresh]>からURLを取得する正規表現\n */\nvar reMetaRefresh = {\n  /*eslint-disable key-spacing*/\n  comment : /<!--[\\s\\S]*?-->/g,\n  tag     : /<\\s*meta\\s[\\s\\S]*http-equiv\\s*=\\s*[\"']?refresh[\"']?[\\s\\S]*?>/i,\n  url     : /\\d\\s*;\\s*URL\\s*=\\s*[\"']?\\s*(.*?)[\"'\\s>]/i\n  /*eslint-enable key-spacing*/\n};\n\n/**\n * http(s)リクエスト処理メインモジュール\n */\nmodule.exports = {\n  /**\n   * プロパティ\n   */\n\n  /*eslint-disable key-spacing*/\n  core     : null,          // cheerio-httpcli本体\n  encoding : null,          // encodingモジュール\n  cheerio  : null,          // 拡張cheerioオブジェクト\n  engine   : request,       // requestモジュール\n  jar      : request.jar(), // クッキー\n  /*eslint-enable key-spacing*/\n\n  /**\n   * メソッド\n   */\n\n  /**\n   * プロパティや内部情報の初期化\n   */\n  reset: function () {\n    // クッキーオブジェクト作り直し\n    this.jar = request.jar();\n  },\n\n  /**\n   * promise/callbackに両対応したエラー終了処理(promise実行後)\n   *\n   * @param err     Errorオブジェクトもしくはエラーメッセージ文字列\n   * @param options prepareで作成したオプション情報\n   * @param extra   Errorオブジェクトに追加する情報\n   * @param result  処理結果オブジェクト\n   * @param reject  (promise処理時のみ)reject関数\n   */\n  fail: function (err, options, extra, result, reject) {\n    extra = extra || {};\n    result = result || {};\n    var error = (err instanceof Error) ? err : new Error(err);\n    if (options.param.uri) {\n      error.url = options.param.uri;\n    }\n    if (options.param.form) {\n      error.param = options.param.form;\n    } else if (options.param.qs) {\n      error.param = options.param.qs;\n    }\n    each(extra, function (exVal, exKey) {\n      if (typeOf(exVal) !== 'undefined') {\n        error[exKey] = exVal;\n      }\n    });\n\n    // callback形式\n    if (typeOf(options.callback) === 'function') {\n      return options.callback(error, result.$, result.response, result.body);\n    }\n\n    // promise形式\n    if (reject) {\n      each(result, function (val, name) {\n        if (typeOf(val) !== 'undefined') {\n          error[name] = val;\n        }\n      });\n      return reject(error);\n    }\n\n    // 同期処理\n    result.error = error;\n    return result;\n  },\n\n  /**\n   * promise/callbackに両対応したエラー終了処理(promise実行前)\n   *\n   * @param err     Errorオブジェクトもしくはエラーメッセージ文字列\n   * @param options prepareで作成したオプション情報\n   * @param extra   Errorオブジェクトに追加する情報\n   * @param result  処理結果オブジェクト\n   * @param reject  (promise処理時のみ)reject関数\n   */\n  error: function (err, options, extra, result) {\n    extra = extra || {};\n    result = result || {};\n\n    // callback形式 or 同期処理\n    if (typeOf(options.callback) === 'function' || options.callback === 'sync') {\n      return this.fail(err, options, extra, result);\n    }\n\n    // promise形式(promiseオブジェクトを返す)\n    return new RSVP.Promise((function (resolve, reject) {\n      return this.fail(err, options, extra, result, reject);\n    }).bind(this));\n  },\n\n  /**\n   * レスポンスからリダイレクト先のURLを取得\n   *\n   * @param res      requestモジュールで取得したレスポンスオブジェクト\n   * @param body     コンテンツのBuffer\n   * @return string リダイレクト先のURL(なければnull)\n   */\n  checkRedirect: function (res, body) {\n    // POST後のリダイレクトはrequestモジュールでは自動で飛んでくれない(と思う)\n    if (/^30\\d$/.test(res.statusCode) && res.headers.location) {\n      return urlParser.resolve(res.request.uri.href, res.headers.location);\n    }\n\n    // ここから先はHTMLの場合のみ\n    if (! this.core.followMetaRefresh || ! /html/.test(res.headers['content-type'])) {\n      return null;\n    }\n\n    // METAタグのrefreshがHTML内にあればリダイレクト\n    // IEの時だけリダイレクトとか考慮するのが面倒なのでコメントは全部削除\n    var chkBody = (body || '').toString('utf-8').replace(reMetaRefresh.comment, '');\n    var metaRefresh = chkBody.match(reMetaRefresh.tag);\n    if (metaRefresh) {\n      var refreshUrl = (metaRefresh[0].match(reMetaRefresh.url) || [])[1];\n      // refreshのURLが相対パスの場合があるので絶対パス化\n      return urlParser.resolve(res.request.uri.href, refreshUrl);\n    }\n\n    return null;\n  },\n\n  /**\n   * リクエスト処理\n   *\n   * @param param    requestモジュールでのhttpアクセス時に指定するパラメータ\n   * @param retry    内部処理用引数(リトライ回数)\n   * @param callback リクエスト完了時のコールバック関数(err, response, body(buffer))\n   */\n  request: function (param, retry, callback) {\n    if (typeOf(retry) === 'function') {\n      callback = retry;\n      retry = 0;\n    }\n\n    // レスポンスのサイズを計測するためのバッファ\n    var buffer = '';\n    var maxDataSize = this.core.maxDataSize;\n\n    // リクエスト実行\n    var req = request(param, (function (err, res, body) {\n      if (err) {\n        if (callback) {\n          callback(err, res, body);\n          return;\n        }\n        req.emit('error', err);\n        return;\n      }\n\n      // requestモジュールが対応していないタイプのリダイレクトチェック\n      var location = this.checkRedirect(res, body);\n      if (location) {\n        retry = retry || 0;\n        if (retry > 5) {\n          err = new Error('redirect limit over');\n          if (callback) {\n            callback(err, res, body);\n            return;\n          }\n          req.emit('error', err);\n          return;\n        }\n\n        // パラメータの調整\n        if (! /^30\\d$/.test(res.statusCode)) {\n          // METAタグrefreshの場合はリファラーを更新\n          param.headers.Referer = param.uri;\n        }\n        var parsed = urlParser.parse(location);\n        param.headers.Host = parsed.host;\n        param.uri = location;\n        param.method = 'GET';\n        delete param.form;\n        delete param.qs;\n        this.request(param, retry + 1, callback);\n        return;\n      }\n\n      if (callback) {\n        callback(null, res, body);\n        return;\n      }\n    }).bind(this)).on('data', function (chunk) {\n      if (maxDataSize !== null) {\n        // バッファにチャンクを追加\n        buffer += chunk;\n\n        // 制限を超過したら中止\n        if (buffer.length > maxDataSize) {\n          req.abort();\n          callback(new Error('data size limit over'));\n          return;\n        }\n      }\n    });\n\n    return req;\n  },\n\n  /**\n   * 非同期http通信処理本体\n   *\n   * @param options prepareで作成したオプション情報\n   * @param resolve (promise処理時のみ)resolve関数\n   * @param reject  (promise処理時のみ)reject関数\n   */\n  execute: function (options, resolve, reject) {\n    // リクエスト実行\n    this.request(options.param, (function (err, res, body) {\n      // レスポンスから処理結果オブジェクト作成\n      var obj = this.responseToResult(err, res, body, options);\n      if (obj.err) {\n        this.fail(obj.err, options, obj.extra, obj.result, reject);\n        return;\n      }\n\n      // promise処理時とcallback処理時で処理の返し方を切り替え\n      var result = obj.result;\n      if (typeOf(options.callback) === 'function') {\n        options.callback(result.error, result.$, result.response, result.body);\n      } else {\n        resolve(result);\n      }\n    }).bind(this));\n  },\n\n  /**\n   * リクエストオプションからクッキー連想配列を作成\n   *\n   * @param options prepareで作成したオプション情報\n   * @return {名前: 値}のクッキー連想配列\n   */\n  getCookiesFromOption: function (options) {\n    var cookies = {};\n    each(options.param.jar.getCookies(options.param.uri), function (c) {\n      cookies[c.key] = c.value;\n    });\n    return cookies;\n  },\n\n  /**\n   * 同期http通信処理本体\n   *\n   * @param options prepareで作成したオプション情報\n   * @return リクエスト処理結果オブジェクト\n   *         {\n   *           err:      request処理結果のerr\n   *           $:        request処理結果のbodyをcheerioでパースしたオブジェクト\n   *           response: toJSON()したrequest処理結果のres\n   *           body:     UTF-8化したrequest処理結果のbody\n   *         }\n   */\n  executeSync: function (options) {\n    var args = {\n      param: options.param,\n      core: {},\n      cookies: this.getCookiesFromOption(options)\n    };\n\n    // jarはJSON化せず別途cookie付加するのでここではセットしない\n    delete args.param.jar;\n\n    // workerに渡すcoreオプション取得(関数やdownloadオブジェクトは渡さない)\n    each(this.core, function (val, key) {\n      if (typeOf(val) !== 'function' && key !== 'download') {\n        args.core[key] = val;\n      }\n    });\n\n    // spawnSyncでworker.jsでリクエスト処理を行う\n    var worker = [ path.join(__dirname, 'worker.js') ];\n    var result = spawnSync(process.execPath, worker, {\n      input: JSON.stringify(args),\n      encoding: 'utf-8'\n    });\n    var message = (result.status === 0) ? result.stderr : null;\n\n    // worker.jsが出力したJSONを取得して処理結果オブジェクトを作成\n    var json = {};\n    try {\n      json = JSON.parse(result.stdout);\n    } catch (e) {\n      message = 'An error occurred during the sync request: ' + e.message;\n    }\n\n    // worker.jsのjarが取得したcookieをこちらのjarにセット\n    var Cookie = require('tough-cookie').Cookie;\n    if (json.response && typeOf(json.cookies) === 'array') {\n      each(json.cookies, (function (c) {\n        this.jar.setCookie(\n          Cookie.fromJSON(c).toString(),\n          json.response.request.uri.href\n        );\n      }).bind(this));\n    }\n    options.param.jar = this.jar;\n\n    var err = (message) ? new Error(message) : null;\n    var body = (json.body) ? new Buffer(json.body) : null;\n    var obj = this.responseToResult(err, json.response, body, options);\n    if (obj.err) {\n      return this.fail(obj.err, options, obj.extra, obj.result);\n    }\n    return obj.result;\n  },\n\n  /**\n   * request処理で取得したresponoseオブジェクトから処理結果オブジェクト作成\n   *\n   * @param err     request処理結果のerr\n   * @param res     request処理結果のres\n   * @param body    request処理結果のbody\n   * @param options prepareで作成したオプション情報\n   * @return 処理結果オブジェクトおよび処理過程で発生したエラー情報\n   *         {\n   *           err:    エラーオブジェクト or エラー文字列\n   *           extra:  処理結果エラーオブジェクトに付加する追加情報\n   *           result: 処理結果オブジェクト\n   *         }\n   */\n  responseToResult: function (err, res, body, options) {\n    // 処理結果格納先\n    var result = {};\n\n    // クッキー取得\n    if (res) {\n      res.cookies = this.getCookiesFromOption(options);\n      Object.freeze(res.cookies);\n    }\n\n    result.response = res;\n\n    if (err) {\n      return {\n        err: err,\n        result: result\n      };\n    }\n    if ((body || []).length === 0) {\n      return {\n        err: 'no content',\n        extra: { statusCode: res.statusCode },\n        result: result\n      };\n    }\n\n    // Buffer状態のHTMLコンテンツからエンコーディングを判定してUTF-8に変換\n    var enc = options.encode || this.encoding.detect(body);\n    if (enc) {\n      enc = enc.toLowerCase();\n      try {\n        body = this.encoding.convert(enc, body);\n      } catch (e) {\n        return {\n          err: e,\n          extra: { charset: enc },\n          result: result\n        };\n      }\n    }\n    result.body = body.toString('utf8');\n\n    // cheerioでHTMLコンテンツをパース & 現在のページ情報を追加\n    var cheerioOpt = {\n      decodeEntities: true,\n      xmlMode: (! this.core.forceHtml && (\n        (res && /[\\/\\+]xml\\b/.test(res.headers['content-type'])) ||\n        /\\.(rss|rdf|atom|opml|xslt?)\\b/.test(options.param.uri)\n        // Content-Typeか拡張子でXMLであると判別された場合はxmlModeをON\n      ))\n    };\n    result.$ = this.cheerio.load(result.body, cheerioOpt);\n    result.$._root._documentInfo = {\n      url: res.request.uri.href,\n      encoding: enc,\n      isXml: cheerioOpt.xmlMode\n    };\n    result.$.documentInfo = function () {\n      return this._root._documentInfo;\n    };\n\n    // 素の$.htmlはエンティティ化してしまうので退避\n    result.$.entityHtml = result.$.html;\n    result.$.html = function () {\n      return cutil.decodeEntities(\n        this.entityHtml.apply(this, Array.prototype.slice.call(arguments))\n      );\n    };\n\n    // HTMLが取得できてもレスポンスステータスが20xでない場合(ソフト404など)はエラーとして処理する\n    if (String(res.statusCode).substr(0, 2) !== '20') {\n      return {\n        err: 'server status',\n        extra: { statusCode: res.statusCode },\n        result: result\n      };\n    }\n\n    if (this.core.referer) {\n      // 次のリクエスト時に今アクセスしたURLをRefererとする\n      this.core.headers.Referer = result.$._root._documentInfo.url;\n    }\n\n    return { result: result };\n  },\n\n  /**\n   * デフォルトのリクエストヘッダに指定したヘッダが存在するかチェック\n   *\n   * @param header  リクエストヘッダ名\n   * @return true or false\n   */\n  hasHeader: function (header) {\n    header = header.toLowerCase();\n    return (Object.keys(this.core.headers).filter(function (h) {\n      return (h.toLowerCase() === header);\n    }).length > 0);\n  },\n\n  /**\n   * リクエスト時に必要なオプション情報を作成\n   *\n   * @param method   リクエストメソッド\n   * @param url      リクエスト先のURL\n   * @param param    リクエストパラメータ\n   * @param encode   取得先のHTMLのエンコーディング(default: 自動判定)\n   * @param callback リクエスト完了時のコールバック関数(err, cheerio, response, body)\n   * @return オプション情報オブジェクト\n   */\n  prepare: function (method, url, param, encode, callback) {\n    // 省略されている引数に合わせて調整\n    if (typeOf(encode) === 'function') {\n      callback = encode;\n      encode = null;\n    } else if (typeOf(param) === 'function') {\n      callback = param;\n      param = null;\n      encode = null;\n    }\n    if (! encode && typeOf(param) === 'string' && param.indexOf('=') === -1) {\n      // 第3引数が文字列でパラメータの指定でもない => paramが省略されてencodeが指定されている\n      encode = param;\n      param = null;\n    }\n\n    var cli = this.core;\n\n    // デフォルトはChromeとして振る舞う\n    if (! this.hasHeader('User-Agent')) {\n      cli.setBrowser('chrome');\n    }\n\n    // OSのロケールからAcceptLanguageを設定\n    if (! this.hasHeader('Accept-Language')) {\n      try {\n        // spawn: trueだとexecFileSyncを使うのでできればfalseにしたいが\n        // windowsだとロケールを取得できる確実な環境変数がなさそう\n        var locale = osLocale.sync({ spawn: (process.platform === 'win32') });\n        if (locale) {\n          locale = locale.replace(/_/g, '-');\n          // en-USだとロケール取得に失敗した可能性があるので何もしない\n          if (locale !== 'en-US') {\n            cli.headers['Accept-Language'] = locale.replace(/_/g, '-') + ',en-US';\n          }\n        }\n      } catch (/*eslint-disable no-unused-vars*/ e /*eslint-enable no-unused-vars*/) {\n        // ロケールが取得できない場合は何もしない\n      }\n    }\n\n    // Acceptヘッダにそれっぽいのを付加しておく\n    if (! this.hasHeader('Accept')) {\n      cli.headers.Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8';\n    }\n\n    // リクエストヘッダ作成\n    var parsed = urlParser.parse(url);\n    var reqHeader = assign({ Host: parsed.host }, cli.headers);\n\n    var options = {\n      param: {\n        uri: url,\n        method: method,\n        encoding: null,  // Bufferでコンテンツを取得する\n        headers: reqHeader,\n        timeout: cli.timeout,\n        gzip: cli.gzip,\n        time: true,\n        followRedirect: true,\n        jar: this.jar,\n        secureOptions: constants.SSL_OP_NO_TLSv1_2  // とりあえず付けてみた\n      },\n      encode: encode,\n      callback: callback\n    };\n\n    if ((typeOf(param) === 'object' && Object.keys(param).length > 0) || (param || '').length > 0) {\n      options.param[(method === 'GET') ? 'qs' : 'form'] = param;\n    }\n\n    return options;\n  },\n\n  /**\n   * リクエスト処理スタート\n   *\n   * @param method   リクエストメソッド\n   * @param url      リクエスト先のURL\n   * @param param    リクエストパラメータ\n   * @param encode   取得先のHTMLのエンコーディング(default: 自動判定)\n   * @param callback リクエスト完了時のコールバック関数(err, cheerio, response, body)\n   */\n  run: function (method, url, param, encode, callback) {\n    var isSync = false;\n    if (callback === 'sync') {\n      // Electron上ではSync系メソッドはサポート外\n      // ※process.execPathで別スクリプトを実行する性質上\n      if (process.versions.electron) {\n        throw new Error('sync request is not support on Electron');\n      }\n\n      isSync = true;\n      callback = null;\n    }\n\n    var options = this.prepare(method, url, param, encode, callback);\n\n    // デバッグ情報\n    if (this.core.debug) {\n      var label = '[DEBUG]';\n      var debugParams = {};\n      debugParams[label] = {};\n      each([ 'uri', 'method', 'headers', 'qs', 'form' ], function (v) {\n        if (options.param[v]) {\n          debugParams[label][v] = options.param[v];\n        }\n      });\n      var cookies = this.getCookiesFromOption(options);\n      if (Object.keys(cookies).length > 0) {\n        debugParams[label].cookies = cookies;\n      }\n      process.stderr.write(prettyjson.render(debugParams) + '\\n\\n');\n    }\n\n    // 同期処理\n    if (isSync) {\n      return this.executeSync(options);\n    }\n\n    // 非同期処理\n    if (typeOf(options.callback) !== 'function') {\n      // callbackを指定しなかった場合はpromiseオブジェクトを返す\n      return new RSVP.Promise((function (resolve, reject) {\n        this.execute(options, resolve, reject);\n      }).bind(this));\n    }\n    this.execute(options);\n    /*eslint-disable consistent-return*/ return; /*eslint-enable consistent-return*/\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/cheerio/util.js":"/*jshint -W100*/\n\n'use strict';\n\nvar he     = require('he');\nvar typeOf = require('type-of');\n\n/**\n * 汎用関数 - エンティティのデコード\n *\n * @param str エンティティ化された文字列\n */\nmodule.exports.decodeEntities = function (str) {\n  // 文字列でない場合(cheerioオブジェクトなど)はそのまま返す\n  if (typeOf(str) !== 'string') {\n    return str;\n  }\n  return he.decode(str);\n};\n\n/**\n * 汎用関数 - パラメータの正規化\n *\n * @param val GET/POSTパラメータ\n */\nmodule.exports.paramFilter = function (val) {\n  // 0はパラメータとして有効なので残す\n  // null/undefinedは空文字にして返す\n  if (typeOf(val) !== 'number' && ! val) {\n    val = '';\n  }\n  return val;\n};\n\n/**\n * 汎用関数 - cheerio拡張情報_documentInfo取得\n *\n * @param $ 拡張cheerioオブジェクト\n * @return client.jsでWEBページ情報取得時にセットされた_documentInfo\n */\nmodule.exports.documentInfo = function ($) {\n  if ($.cheerio !== '[cheerio object]') {\n    throw new Error('argument is not cheerio object');\n  }\n  // 大元の_rootは_originalRootという名称で保持されているらしい by cheerio/lib/static.js\n  return $._root[0]._documentInfo || $._originalRoot._documentInfo;\n};\n\n/**\n * 汎用関数 - PHPでいうin_array()\n * cheerioとは無関係\n *\n * @param array 調べる配列\n * @param val   調べる値\n * @return true or false\n */\nmodule.exports.inArray = function (array, val) {\n  if (typeOf(array) !== 'array') {\n    throw new Error(array + ' is not Array');\n  }\n  return (array.indexOf(val) !== -1);\n};\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/cheerio/html.js":"/*eslint no-invalid-this:0*/\n/*jshint -W100*/\n\n'use strict';\n\nvar util   = require('util');\nvar colors = require('colors/safe');\nvar cutil  = require('./util');\n\nmodule.exports = function (encoding, client, cheerio) {\n  /**\n   * cheerio.load()の際にdecodeEntitiesをtrueにするとhtml()メソッドで文字列が\n   * すべてエンティティ表記になってしまうのでエンティティをデコードするように拡張する\n   *\n   * @param str 指定した場合はその文字列を要素のHTMLとして設定\n   *            指定しない場合は要素に設定されているHTMLを返す\n   */\n  // cheerioデフォルトのhtmlメソッドをentityHtmlとして退避\n  cheerio.prototype.entityHtml = cheerio.prototype.html;\n\n  cheerio.prototype.html = function (str) {\n    // cheerioデフォルトのhtml()結果をデコード(エンティティ可読文字化)したものを返す\n    return cutil.decodeEntities(this.entityHtml(str));\n  };\n\n\n  /***\n   * [DEPRICATED] 将来削除予定\n   */\n  var depricatedMessage = '[DEPRICATED] %s() will be removed in the future)';\n  cheerio.prototype._text = function (str) {\n    console.warn(colors.yellow(util.format(depricatedMessage, '_text')));\n    return this.text(str);\n  };\n\n  cheerio.prototype._html = function (str) {\n    console.warn(colors.yellow(util.format(depricatedMessage, '_html')));\n    return this.html(str);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/cheerio/click.js":"/*jshint -W100*/\n\n'use strict';\n\nvar cutil     = require('./util');\n\nmodule.exports = function (encoding, client, cheerio) {\n  /**\n   * a要素のリンク/submit系ボタンのクリックをエミュレート\n   *\n   * a要素: リンク先のページを取得\n   * submit系ボタン: 所属フォームのsubmit\n   *\n   * @param callback リクエスト完了時のコールバック関数(err, response, body(buffer))\n   */\n  var emulateClick = function (elem, callback) {\n    var doc = cutil.documentInfo(elem);\n    var $link = null;\n\n    // a要素でなければエラー\n    try {\n      if (elem.length === 0) {\n        throw new Error('no elements');\n      }\n\n      // 複数ある場合は先頭の要素のみ\n      $link = elem.eq(0);\n      // submit系要素の場合はsubmit()に飛ばす\n      var type = $link.attr('type');\n      var is = {\n        a: $link.is('a'),\n        input: $link.is('input'),\n        button: $link.is('button')\n      };\n      if ((is.input || is.button) && cutil.inArray([ 'submit', 'image' ], type)) {\n        var $form = $link.closest('form');\n        var param = {};\n        var name = cutil.paramFilter($link.attr('name'));\n        if (name.length > 0) {\n          if (type === 'submit') {\n            // submit: 押したボタンのnameとvalueを送信する\n            param[name] = $link.val() || $link.attr('value');\n          } else {\n            // image: 押したボタンのname.xとname.y座標を送信する(ダミーなので0)\n            param[name + '.x'] = 0;\n            param[name + '.y'] = 0;\n          }\n        }\n        return $form.submit(param, callback);\n      }\n      // submit系要素でもa要素でもなければエラー\n      if (! is.a) {\n        throw new Error('element is not clickable');\n      }\n    } catch (e) {\n      return client.error(e.message, {\n        param: { uri: doc.url },\n        callback: callback\n      });\n    }\n\n    return client.run('GET', $link.url(), {}, null, callback);\n  };\n\n  /**\n   * 非同期クリック\n   */\n  cheerio.prototype.click = function (callback) {\n    return emulateClick(this, callback);\n  };\n\n  /**\n   * 同期クリック\n   */\n  cheerio.prototype.clickSync = function (callback) {\n    return emulateClick(this, 'sync');\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/cheerio/submit.js":"/*jshint -W100*/\n\n'use strict';\n\nvar urlParser = require('url');\nvar typeOf    = require('type-of');\nvar each      = require('foreach');\nvar cutil     = require('./util');\n\nmodule.exports = function (encoding, client, cheerio) {\n  /**\n   * form要素からの送信をエミュレート\n   *\n   * @param param    疑似設定するフォーム送信パラメータ\n   * @param callback リクエスト完了時のコールバック関数(err, response, body(buffer))\n   */\n  var emulateSubmit = function (elem, param, callback) {\n    if (param === 'sync' || typeOf(param) === 'function') {\n      callback = param;\n      param = {};\n    }\n    param = param || {};\n\n    var doc = cutil.documentInfo(elem);\n    var $form = null;\n\n    // form要素でなければエラー\n    try {\n      if (elem.length === 0) {\n        throw new Error('no elements');\n      }\n\n      // 複数ある場合は先頭のフォームのみ\n      $form = elem.eq(0);\n      if (! $form.is('form')) {\n        throw new Error('element is not form');\n      }\n    } catch (e) {\n      return client.error(e.message, {\n        param: { uri: doc.url },\n        callback: callback\n      });\n    }\n\n    // methodとURL確定\n    var method = ($form.attr('method') || 'GET').toUpperCase();\n    var url = urlParser.resolve(doc.url, $form.attr('action') || '');\n\n    // フォーム送信パラメータ作成\n    // 1. デフォルトパラメータ($form.field())を取得した後に\n    // 2. 引数で指定したパラメータ(param)で上書き\n    var formParam = {};\n    each([ $form.field(), param ], function (fp) {\n      each(fp, function (val, name) {\n        var fparam = cutil.paramFilter(val);\n        var fvalue = (typeOf(fparam) === 'array') ? fparam : [ fparam ];\n        // 空パラメータでもname=のみで送信するための仕込み\n        if (fvalue.length === 0) {\n          fvalue.push('');\n        }\n        formParam[name] = fvalue;\n      });\n    });\n\n    // 各種エンコーディングに対応したURLエンコードをする必要があるのでパラメータ文字列を自力で作成\n    var formParamArray = [];\n    each(formParam, function (val, name) {\n      formParamArray.push(val.map(function (vv) {\n        var escName = encoding.escape(doc.encoding, name);\n        var escVal = encoding.escape(doc.encoding, vv);\n        if (method === 'POST') {\n          // application/x-www-form-urlencodedでは半角スペースは%20ではなく+にする\n          escName = escName.replace(/%20/g, '+');\n          escVal = escVal.replace(/%20/g, '+');\n        }\n        return escName + '=' + escVal;\n      }).join('&'));\n    });\n    var formParamStr = formParamArray.join('&');\n\n    // GETの場合はURLに繋げてパラメータを空にする(そうしないと上手く動かないケースがたまにあった)\n    if (method === 'GET') {\n      var join = (url.indexOf('?') === -1) ? '?' : '&';\n      if (formParamStr.length > 0) {\n        url += join + formParamStr;\n      }\n      formParamStr = {};\n    }\n\n    return client.run(method, url, formParamStr, null, callback);\n  };\n\n  /**\n   * 非同期フォーム送信\n   */\n  cheerio.prototype.submit = function (param, callback) {\n    return emulateSubmit(this, param, callback);\n  };\n\n  /**\n   * 同期フォーム送信\n   */\n  cheerio.prototype.submitSync = function (param) {\n    return emulateSubmit(this, param, 'sync');\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/cheerio/tick-untick.js":"/*eslint no-invalid-this:0*/\n/*jshint -W100*/\n\n'use strict';\n\nvar each  = require('foreach');\nvar cutil = require('./util');\n\nmodule.exports = function (encoding, client, cheerio) {\n  /**\n   * チェックボックス/ラジオボタンの選択クリックをエミュレート\n   *\n   * @param elem    checked状態を変更するcheerio要素\n   * @param checked 設定する値('checked' or undefined)\n   */\n  var emulateTick = function (elem, checked) {\n    var $ = cheerio;\n\n    if ($(elem).length === 0) {\n      throw new Error('no elements');\n    }\n\n    // checkboxとradioの振り分け\n    var $targets = {\n      checkbox: [],\n      radio: []\n    };\n    var radioGroups = [];\n    $(elem).each(function (i) {\n      var $e = $(this);\n      var type = $e.attr('type');\n      if (! $e.is('input') || ! cutil.inArray([ 'checkbox', 'radio' ], type)) {\n        // input[type=checkbox/radio]以外が混じっていたらエラー\n        throw new Error('element is not checkbox or radio');\n      }\n      // radio: 同グループで複数要素がtick対象となっている場合は先頭以外の要素は無視\n      if (type === 'radio' && checked) {\n        var name = $e.attr('name').toLowerCase();\n        if (cutil.inArray(radioGroups, name)) {\n          return;\n        }\n        radioGroups.push(name);\n      }\n      $targets[type].push($e);\n    });\n\n    // 振り分けたcheckboxとradioに対してそれぞれ選択状態の変更を行う\n    each($targets, function ($elem, type) {\n      if (type === 'radio' && checked) {\n        // radioかつtickの場合はまず同グループの選択済みradioを全部未選択にする\n        each($elem, function ($e) {\n          var name = $e.attr('name');\n          $e\n          .closest('form')                                 // 所属するフォーム\n          .find('input[type=radio][name=\"' + name + '\"]')  // 同グループのradio\n          .removeAttr('checked');                          // 選択状態\n        });\n      }\n\n      each($elem, function ($e) {\n        if (checked) {\n          $e.attr('checked', checked);\n        } else {\n          $e.removeAttr('checked');\n        }\n      });\n    });\n\n    return elem;\n  };\n\n  /**\n   * チェックボックス/ラジオボタンを選択状態にする\n   */\n  cheerio.prototype.tick = function () {\n    return emulateTick(this, 'checked');\n  };\n\n  /**\n   * チェックボックス/ラジオボタンの選択状態を解除する\n   */\n  cheerio.prototype.untick = function () {\n    return emulateTick(this);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/cheerio/field.js":"/*eslint no-invalid-this:0*/\n/*jshint -W100*/\n\n'use strict';\n\nvar typeOf = require('type-of');\nvar each   = require('foreach');\nvar cutil  = require('./util');\n\nmodule.exports = function (encoding, client, cheerio) {\n  /**\n   * フォーム内部品の値取得/設定\n   *\n   * jQueryの$().attrや$().cssと同じ使用感\n   * 1. nameのみ指定した場合はそのname部品の値を取得\n   * 2. name, valueを指定した場合はそのname部品の値をvalueに設定\n   * 3. valueに関数を指定した場合はその関数の戻り値をname部品の値に設定\n   * 4. nameに文字列でなくname:valueの連想配列を指定した場合は複数要素をまとめて設定\n   *\n   * @param name       対象のフォーム部品のname or name: valueの連想配列\n   * @param value      設定する値 or 値を返す関数 or undefined\n   * @param onNotFound 指定したnameの要素が見つからない場合の挙動('throw', 'append')\n   * @return 1: name部品の値 or 2-4: this(メソッドチェーン用)\n   */\n  cheerio.prototype.field = function (name, value, onNotFound) {\n    var $ = cheerio;\n    var $form = null;\n\n    // form要素でなければエラー\n    if (this.length === 0) {\n      throw new Error('no elements');\n    }\n\n    // 複数ある場合は先頭のフォームのみ\n    $form = this.eq(0);\n    if (! $form.is('form')) {\n      throw new Error('element is not form');\n    }\n\n    // *** 値取得モード ***\n    var argLen = arguments.length;\n    var isGet = ((argLen === 0) || (typeOf(name) === 'string' && argLen === 1));\n    if (isGet) {\n      // cheerio.serializeArray()だと値のない部品を拾ってくれないようなので自力でやる\n      var fieldInfo = {};\n      $form.find('input,textarea,select').each(function (idx) {\n        var $e = $(this);\n        var name = $e.attr('name');\n        var type = ($e.attr('type') || '').toLowerCase();\n        var val = $e.val() || $e.attr('value');\n        if (! name) {\n          return;\n        }\n        // submit系要素はjavascriptでform.submit()した時にはパラメータとして付加しない\n        // (ブラウザと同じ挙動)\n        if (cutil.inArray([ 'submit', 'image' ], type)) {\n          return;\n        }\n        fieldInfo[name] = fieldInfo[name] || {};\n        fieldInfo[name].count = (fieldInfo[name].count || 0) + 1;\n        fieldInfo[name].params = fieldInfo[name].params || [];\n\n        // radioは複数同nameがあるのが普通なので設定値を配列にしない\n        if (type === 'radio' && ! fieldInfo[name].force) {\n          fieldInfo[name].force = 'single';\n        }\n        // selectでmultipleの場合は強制的に設定値を配列にする\n        if ($e.is('select') && $e.attr('multiple') && ! fieldInfo[name].force) {\n          fieldInfo[name].force = 'multi';\n        }\n\n        if (cutil.inArray([ 'checkbox', 'radio' ], type) && ! $e.attr('checked')) {\n          return;\n        }\n        if (typeOf(val) === 'array') {\n          fieldInfo[name].params = fieldInfo[name].params.concat(val);\n        } else {\n          fieldInfo[name].params.push(val);\n        }\n      });\n      // 複数同nameのcheckboxやmultipleのselect以外は値の配列化を解除\n      var fieldParams = {};\n      each(fieldInfo, function (info, name) {\n        fieldParams[name] = info.params;\n        if (info.force !== 'multi' && (info.force === 'single' || info.count === 1)) {\n          fieldParams[name] = fieldParams[name].shift();\n        }\n      });\n\n      // 引数未指定の場合はそのフォーム内の全要素のname:valueを連想配列で返す\n      return (argLen === 0) ? fieldParams : fieldParams[name];\n    }\n\n    // *** 値設定モード ***\n    var values = {};\n    switch (typeOf(name)) {\n      case 'string': {\n        // name: valueの連想配列化してvaluesにセット\n        values[name] = value;\n        break;\n      }\n      case 'object': {\n        values = name;\n        // 連想配列で指定した場合はvalueの位置にonNotFoundが入っているのでずらす\n        onNotFound = value;\n        break;\n      }\n      default: {\n        // それ以外の型は受け付けない\n        throw new Error('name is not string or object');\n      }\n    }\n\n    each(values, function (v, k, o) {\n      // valueが関数で指定されている場合は実行して値ベースにそろえる\n      var realValue = (typeOf(v) === 'function') ? v() : v;\n\n      // 同じnameで別部品とかあってもさすがにそれはフォーム側の問題な気がするので無視\n      var selector = [ 'input', 'textarea', 'select' ].map(function (s) {\n        return s + '[name=\"' + k + '\"]';\n      }).join(',');\n      var $parts = $form.find(selector);\n      var pType = $parts.attr('type');\n\n      if ($parts.length === 0) {\n        // nameに該当する部品が見つからない場合はonNotFoundに従う\n        if (onNotFound === 'append') {\n          // append: 新規に要素を作成してフォームに付加\n          var iType = 'hidden';\n          if (typeOf(realValue) === 'array') {\n            // 値が配列: checkbox\n            iType = 'checkbox';\n          } else {\n            // 値が文字列: hidden\n            realValue = [ realValue ];\n          }\n          each(realValue, function (val) {\n            var $input = $('<input/>').attr({ type: iType, name: k, value: val });\n            if (iType === 'checkbox') {\n              $input.attr('checked', 'checked');\n            }\n            $form.append($input);\n          });\n          return;\n        }\n        if (onNotFound === 'throw') {\n          // throw: エラー\n          throw new Error('Element named \"' + k + '\" could not be found in this form');\n        }\n      }\n\n      if (cutil.inArray([ 'checkbox', 'radio' ], pType)) {\n        // radioの場合は指定したvalueが該当しなければ何もしない\n        if (pType === 'radio') {\n          realValue = String(realValue);\n          var partsValues = $parts.map(function (idx) {\n            return $(this).val();\n          }).get();\n          if (! cutil.inArray(partsValues, realValue)) {\n            return;\n          }\n        }\n\n        // tick/untickで値を操作\n        if (typeOf(realValue) !== 'array') {\n          realValue = [ realValue ];\n        }\n        $parts.untick().each(function (idx) {\n          if (cutil.inArray(realValue, $(this).val())) {\n            $(this).tick();\n          }\n        });\n        return;\n      }\n\n      $parts.val(realValue);\n    });\n\n    return this;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/cheerio/url.js":"/*eslint no-invalid-this:0*/\n/*jshint -W100*/\n\n'use strict';\n\nvar urlParser = require('url');\nvar valUrl    = require('valid-url');\nvar typeOf    = require('type-of');\nvar cutil     = require('./util');\nvar assign    = require('object-assign');\n\nmodule.exports = function (encoding, client, cheerio) {\n  /**\n   * a要素/img要素の絶対URLを取得\n   *\n   * @param optFilter 取得するURLのフィルタリングオプション\n   * @param srcAttrs  (imgのみ)srcよりも優先して取得する属性名(文字列 or 配列)\n   * @return 絶対URLもしくはその配列\n   */\n  cheerio.prototype.url = function (optFilter, srcAttrs) {\n    var doc = cutil.documentInfo(this);\n    var $ = cheerio;\n    var result = [];\n\n    if (cutil.inArray([ 'string', 'array' ], typeOf(optFilter))) {\n      srcAttrs = optFilter;\n      optFilter = {};\n    } else {\n      optFilter = optFilter || {};\n    }\n\n    var filter = assign({\n      relative: true,  // 相対リンク\n      absolute: true,  // 絶対リンク\n      invalid: true    // URL以外\n    }, optFilter);\n\n    srcAttrs = srcAttrs || [ 'data-original', 'data-lazy-src', 'data-src' ];\n    if (typeOf(srcAttrs) !== 'array') {\n      srcAttrs = [ srcAttrs ];\n    }\n    srcAttrs.push('src');\n\n    // a要素/img要素でなければエラー\n    this.each(function () {\n      var $elem = $(this);\n      var is = {\n        a: $elem.is('a'),\n        img: $elem.is('img')\n      };\n      if (! is.a && ! is.img) {\n        throw new Error('element is not link or img');\n      }\n\n      // URLを取り出して絶対化\n      var srcUrl = null;\n      if (is.a) {\n        srcUrl = $elem.attr('href');\n      } else {\n        // imgの場合はsrcAttrsの優先順に従って属性を見ていく\n        for (var i = 0; i < srcAttrs.length; i++) {\n          srcUrl = $elem.attr(srcAttrs[i]);\n          if (srcUrl) {\n            break;\n          }\n        }\n      }\n\n      var absUrl = (srcUrl) ? urlParser.resolve(doc.url, srcUrl) : srcUrl;\n\n      // 除外判定\n      if (valUrl.isWebUri(absUrl)) {\n        var isAbsoluteLink = /^[a-z]+:\\/\\//i.test(srcUrl);\n        if (isAbsoluteLink && ! filter.absolute) {\n          return;\n        }\n        if (! isAbsoluteLink && ! filter.relative) {\n          return;\n        }\n      } else if (! filter.invalid) {\n        return;\n      }\n      result.push(absUrl);\n    });\n\n    // 要素数が1の場合は配列でなく文字列で返す\n    return (this.length === 1) ? result[0] : result;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/cheerio/download.js":"/*eslint no-invalid-this:0*/\n/*jshint -W100*/\n\n'use strict';\n\nvar util   = require('util');\nvar events = require('events');\nvar stream = require('stream');\nvar async  = require('async');\nvar assign = require('object-assign');\nvar cutil  = require('./util');\n\nmodule.exports = function (encoding, client, cheerio) {\n  var urlCache = [];\n\n  /**\n   * ダウンロードイベント管理用クラス\n   *\n   * すべてのダウンロード結果はこのクラスにemit()される\n   * - success: ダウンロード完了時(url, buffer)\n   * - error:   ダウンロード失敗時(error)\n   */\n  var DownloadEvent = (function () {\n    function DownloadEvent() {\n      events.EventEmitter.call(this);\n      this.parallel = 3;\n      this.state = Object.freeze({\n        queue: 0,     // ダウンロードキューに残っている順番待ち画像の数\n        complete: 0,  // ダウンロードが完了した画像の数\n        error: 0      // ダウンロードが失敗した画像の数\n      });\n    }\n    util.inherits(DownloadEvent, events.EventEmitter);\n\n    /**\n     * URLキャッシュクリア\n     */\n    DownloadEvent.prototype.clearCache = function () {\n      urlCache.length = 0;\n    };\n\n    return DownloadEvent;\n  })();\n  client.core.download = new DownloadEvent();\n\n\n  /**\n   * ダウンロードストリームクラス\n   */\n  var DownloadStream = (function () {\n    function DownloadStream(res) {\n      stream.PassThrough.call(this);\n      this.url = (res.request) ? res.request.uri : 'base64';\n      this.type = res.headers['content-type'];\n      this.length = Number(res.headers['content-length'] || -1);\n\n      // タイムアウト時間を過ぎてもStreamの読み出しが行われていない場合は放置されているとみなす\n      this.__timer = setTimeout((function () {\n        if (! this.isUsed()) {\n          clearTimeout(this.__timer);\n          this.__timer = null;\n          this.emit('error', new Error('stream timeout (maybe stream is not used)'));\n        }\n      }).bind(this), client.core.timeout);\n    }\n    util.inherits(DownloadStream, stream.PassThrough);\n\n    /**\n     * Stream => Buffer\n     *\n     * @param cb 変換後のBufferを受け取るコールバック関数(err, buffer)\n     */\n    DownloadStream.prototype.toBuffer = function (cb) {\n      if (! (cb instanceof Function)) {\n        throw new Error('callback is not function');\n      }\n      if (this.isUsed()) {\n        throw new Error('stream has already been read');\n      }\n\n      var buffer = [];\n      this.on('data', function (chunk) {\n        buffer.push(chunk);\n      });\n      this.on('error', function (err) {\n        cb.call(this, err);\n      });\n      this.on('end', function () {\n        cb.call(this, null, Buffer.concat(buffer));\n      });\n    };\n\n    /**\n     * Streamの読み出しが開始されたかどうか(on('data')/pipe()が使用された形跡でチェック)\n     *\n     * @return true: 開始された\n     */\n    DownloadStream.prototype.isUsed = function () {\n      return (this._readableState.pipesCount > 0 || this.listeners('data').length > 0);\n    };\n\n    /**\n     * 手動でend()が呼ばれた場合はスキップ扱いにする\n     */\n    DownloadStream.prototype.end = function () {\n      if (! this.__timer) {\n        return;\n      }\n      clearTimeout(this.__timer);\n      this.__timer = null;\n      this.emit('end');\n    };\n\n    return DownloadStream;\n  })();\n\n\n  /**\n   * イベント管理用クラスカウントを更新\n   */\n  function updateState(counts) {\n    client.core.download.state = Object.freeze(\n      assign({}, client.core.download.state, counts)\n    );\n  }\n\n\n  /**\n   * ダウンロード統括管理用クラス\n   */\n  var DownloadManager = (function () {\n    var jobRunning = false;\n\n    /**\n     * ダウンロードループ実行\n     */\n    function downloadJob(manager) {\n      // 実行フラグON\n      jobRunning = true;\n\n      // 現在キューに入っている分を全部切り出して一時キューに移動\n      var qLen = manager.queue.length;\n      var tmp = {\n        queue: manager.queue.splice(0, qLen),\n        complete: 0,\n        error: 0,\n        applyState: function (complete, error) {\n          // 一時キューの処理状況をダウンロードマネージャーに反映させる\n          this.complete += complete;\n          this.error += error;\n          updateState({\n            complete: client.core.download.state.complete + complete,\n            error: client.core.download.state.error + error,\n            queue: manager.queue.length + this.queue.length - this.complete - this.error\n          });\n        }\n      };\n\n      // 一時キュー内のURLを順番にダウンロード(同時処理数: parallel)\n      async.eachLimit(tmp.queue, manager.parallel, function (url, next) {\n        var req = null;    // リクエストオブジェクト\n        var strm = null;   // ダウンロードストリームオブジェクト\n\n        // 失敗時の処理\n        var onError = function (err) {\n          tmp.applyState(0, 1);\n          err.url = url;\n          client.core.download.emit('error', err);\n          req.abort();\n          next();\n          return;\n        };\n\n        // ストリームで取得する場合はgzipにしない\n        var options = client.prepare('GET', url, {}, null);\n        options.param.gzip = false;\n        try {\n          req = client.request(options.param);\n        } catch (e) {\n          e.type = 'Request Exception';\n          onError(e);\n          return;\n        }\n\n        req\n        .on('response', function (res) {\n          if (String(res.statusCode).substr(0, 2) !== '20') {\n            var err = new Error('server status');\n            err.statusCode = res.statusCode;\n            err.type = 'Invalid Response';\n            onError(err);\n            return;\n          }\n\n          // ダウンロードストリームオブジェクトを作成してレスポンスを流し込む\n          strm = new DownloadStream(res);\n          // ダウンロード完了時\n          strm\n          .on('end', function () {\n            tmp.applyState(1, 0);\n            req.abort();\n            next();\n          })\n          .on('error', function (err) {\n            err.type = 'Stream Error';\n            onError(err);\n          });\n\n          client.core.download.emit('ready', strm);\n          req.pipe(strm);\n        })\n        // 複数回発生するようなのでonce\n        .once('error', function (err) {\n          err.type = 'Request Error';\n          return onError(err);\n        });\n      }, function (err) {\n        // 現在のダウンロード中にキューに追加されているURLがあるかもしれないので\n        // 再度loopイベントを飛ばしておく\n        jobRunning = false;\n        manager.emit('loop');\n      });\n    }\n\n    function DownloadManager() {\n      this.queue = [];       // ダウンロード待ちURL配列\n\n      this.on('loop', (function () {\n        if (jobRunning) {\n          // 二重処理防止\n          return;\n        }\n\n        if (this.queue.length > 0) {\n          downloadJob(this);\n        } else {\n          client.core.download.emit('end');\n        }\n      }).bind(this));\n    }\n    util.inherits(DownloadManager, events.EventEmitter);\n\n    /**\n     * ダウンロードキューにURLを追加\n     *\n     * @param url ダウンロードするURL\n     * @return    true: キューに登録された\n     */\n    DownloadManager.prototype.addQueue = function (url) {\n      if (! url) {\n        return false;\n      }\n      if (cutil.inArray(urlCache, url)) {\n        // 登録/ダウンロード済み\n        return false;\n      }\n      urlCache.push(url);\n      process.nextTick((function () {\n        this.queue.push(url);\n        this.emit('loop');\n      }).bind(this));\n      return true;\n    };\n\n    return DownloadManager;\n  })();\n  var manager = new DownloadManager();\n\n\n  /**\n   * img要素の画像をダウンロード\n   *\n   * @param srcAttrs  (imgのみ)srcよりも優先して取得する属性名(文字列 or 配列)\n   * @return キューに登録した数\n   */\n  cheerio.prototype.download = function (srcAttrs) {\n    // ダウンロードマネージャーの設定がされていない\n    if (client.core.download.listeners('ready').length === 0) {\n      throw new Error('download manager configured no event');\n    }\n\n    var doc = cutil.documentInfo(this);\n    var $ = cheerio;\n\n    // 最初に全要素がimg要素かどうかチェック\n    this.each(function () {\n      if (! $(this).is('img')) {\n        throw new Error('element is not img');\n      }\n    });\n\n    // 同時実行数チェック\n    var parallel = parseInt(client.core.download.parallel, 10);\n    if (parallel < 1 || parallel > 5) {\n      throw new Error('valid download parallel range is 1 and 5');\n    }\n    manager.parallel = parallel;\n\n    var queued = 0;\n    this.each(function () {\n      var $elem = $(this);\n\n      // ここの$はfetch()を経由していないので_documentInfoがない\n      if (! $elem._root) {\n        $elem._root = {\n          0: { _documentInfo: doc }\n        };\n      }\n\n      // Base64埋め込み画像の場合はBuffer化して即返す\n      var b64chk = $elem.attr('src').match(/^data:(image\\/\\w+);base64,([\\s\\S]+)$/i);\n      if (b64chk) {\n        updateState({\n          complete: client.core.download.state.complete + 1\n        });\n        var b64buf = new Buffer(b64chk[2], 'base64');\n        var strm = new DownloadStream({\n          headers: {\n            'content-type': b64chk[1],\n            'content-length': b64buf.length\n          }\n        });\n        client.core.download.emit('ready', strm);\n        strm.write(b64buf);\n        strm.end();\n        queued++;\n        return;\n      }\n\n      var url = $elem.url({ invalid: false }, srcAttrs);\n      if (manager.addQueue(url)) {\n        queued++;\n      }\n    });\n\n    return queued;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/testrunner.js":"#!/usr/bin/env node\n\nvar Mocha = require('mocha');\nvar path  = require('path');\nvar fs    = require('fs');\nvar spawn = require('child_process').spawn;\nvar argv  = require('yargs').argv;\nrequire('mocha-clean');\nrequire('intelli-espower-loader');\n\nvar mocha = new Mocha({\n  ui: 'bdd',\n  reporter: argv.R || 'spec',\n  timeout: 20000,\n  grep: argv.g\n});\n\nvar testDir = path.join(__dirname, 'test');\nfs.readdirSync(testDir).filter(function (file) {\n  return /^[^_].*\\.js$/.test(file);\n}).forEach(function (file) {\n  mocha.addFile(path.join(testDir, file));\n});\n\n// Ctrl-C\nvar stdin = process.stdin;\nstdin.setRawMode(true);\nstdin.resume();\nstdin.setEncoding('utf-8');\nstdin.on('data', function (key) {\n  if (key === '\\u0003') {\n    process.kill(server.pid);\n    process.exit();\n  }\n});\n\nvar server = spawn(process.execPath, [\n  path.join(__dirname, 'test/_server.js')\n], {\n  detached: true\n});\nserver.stdout.on('data', function (data) {\n  process.stdout.write(data);\n});\nserver.stderr.on('data', function (data) {\n  if (data.toString() === '%%% server start %%%') {\n    // start mocha\n    return mocha.run(function (failures) {\n      process.kill(server.pid);\n      process.exit(failures);\n    });\n  }\n  process.stderr.write(data);\n});\n","/home/travis/build/npmtest/node-npmtest-cheerio-httpcli/node_modules/cheerio-httpcli/lib/worker.js":"/*jshint -W100*/\n\n'use strict';\n\nvar client = require('./client');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar input = '';\nprocess.stdin.on('data', function (chunk) {\n  input += chunk;\n});\n\nprocess.stdin.on('end', function () {\n  var args = JSON.parse(input);\n  client.core = args.core;\n\n  // こちらでjarを作りなおす\n  args.param.jar = client.engine.jar();\n  Object.keys(args.cookies).forEach(function (key) {\n    var val = args.cookies[key];\n    var cookie = client.engine.cookie(key + '=' + val);\n    args.param.jar.setCookie(cookie, args.param.uri);\n  });\n\n  client.request(args.param, args.core.gzip, function (err, res, body) {\n    if (err) {\n      process.stderr.write(err.message);\n    }\n    process.stdout.write(JSON.stringify({\n      body: body,\n      response: (res) ? res.toJSON() : null,\n      cookies: args.param.jar.getCookies(args.param.uri) || []\n    }));\n  });\n});\n"}